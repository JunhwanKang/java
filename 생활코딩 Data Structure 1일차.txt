Data Structure[배열과 리스트] by 생활코딩 1일차
﻿
데이터 스트럭쳐는 현실을 프로그래밍 코드로 표현하는 것이다.


백준 같은 곳에서 알고리즘 문제를 풀다 보면

우리 머릿속으로 계산하기 힘들거나

머릿속으로 이렇게 하면 되는데

코드로 표현하기 쉽지 않고 오래 걸리는 때가 있다.


이럴 때 Data Structure를 알고 있다면

모를 때보다 빠르고 간편하게 표현할 수 있을 것이다.


그러나 이것은 우리의 경험과 고생(?)을 해봐야

왜 필요하고 중요한지 알게 될 것이다.


우리가 이미 알고 있는 데이터 스트럭쳐는 배열이 있다.


거의 모든 언어에서 배열을 사용하고 있으니 말이다.


자바에서의 배열은 여러 데이터스터럭쳐에 부품과 같은 존재이다.


그렇기 때문에 배열에는 많은 기능이 없고 간단하다.

이것은 장점이 될 수도 있고 반대로 단점이 될 수도 있다.


그러나 기능이 없는 것이 부품으로서의 역할에 알맞을 것이다.

간단해야 여기저기에 끼워서 사용할 수 있으니 말이다.


배열은 인덱스에 값을 저장하고, 인덱스로 값을 꺼내올 수 있다.

그래서 그룹을 나눌 때 좋고,

하나의 배열에 값을 담아놓고 그것을 컨트롤할 때 좋다.

그래서 반복문 for와 같이 사용하면 powerful 하다고 할 수 있다.


그러나 크기가 정해져있어서

개발자가 예상을 해서 만들어야 하고

예상보다 클 경우 2배의 배열을 만드는 것이 기본이라고 한다.


만약에 계산을 잘 못하거나 실수하면 메모리 낭비도 될 수 있다.


또한 중간에 값을 끼워 넣는 것이 상당히 부담이 간다.



이것을 개선한 것이 List이다.


리스트는 우리가 넣은 만큼 크기가 정해진다.

add를 써서 추가를 시킬 수도 있고,

중간에 값을 끼워 넣을 수도 있다.

또한 삭제가 가능하며 추가, 삭제 시 뒤로 밀려나거나 앞으로 당겨지면서

빈 인덱스가 없어 메모리 낭비가 심하지 않다.


List는

c언어에서는 따로 존재하지 않기 때문에 직접 구현을 하거나

다른 사람이 만들어 놓은 라이브러리를 사용해야 한다.


그렇기 때문에 c 개발자들에게는 더욱 list의 개념이 중요하다.

있어서 쓰는 것과 직접 만들어 사용하는 것은 깊이부터가 다르다.


또한 다른 사람이 만든 라이브러리를 골라 사용할 안목이 있어야 한다.

그러려면 이 개념이 중요하다.


또한 요즘 나온 javascript나 python은 리스트와 배열을

크게 나눠 놓지 않았다.


그러나 java에서는 배열과 리스트를 구분을 확실히 한다.


만드는 법부터 다르고 기능도 다르다.


또한 자바는 리스트를

ArrayList와 LinkedList로 나눈다.


이것의 장단점이 있다.


이렇게 배열과 리스트를 구분하고 리스트를 쪼개서 나눴기 때문에

사용에 있어서 더 자유롭지만

사용법을 익히고 개념을 확실히 해야만 문제가 없을 것이다.


﻿